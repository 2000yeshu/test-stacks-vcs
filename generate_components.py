"""
Script to generate pairs of 'pet' and 'nulls' component blocks in components.tfstack.hcl.

Usage:
    python generate_components.py <even_number_of_components>

- Generates <even_number_of_components> blocks, in pairs of pet and nulls.
- Each pet/nulls pair is uniquely named and references each other appropriately.
- Overwrites components.tfstack.hcl with the generated content.
"""
import sys
import random

def main():
    if len(sys.argv) != 2:
        print("Usage: python generate_components.py <even_number_of_components>")
        sys.exit(1)
    try:
        num_components = int(sys.argv[1])
        if num_components % 2 != 0 or num_components <= 0:
            raise ValueError
    except ValueError:
        print("Please provide a positive even integer for number of components.")
        sys.exit(1)

    num_pairs = num_components // 2
    blocks = [
        '# Copyright (c) HashiCorp, Inc.',
        '# SPDX-License-Identifier: MPL-2.0',
        '',
        '# This file is auto-generated by generate_components.py',
        '# Each pet/nulls pair is uniquely named and references each other.',
        ''
    ]

    for i in range(1, num_pairs + 1):
        pet_name = f"pet_{i}"
        nulls_name = f"nulls_{i}"
        prefix = f"pet_prefix_{i}"
        instances = random.randint(1, 10)
        pet_block = f'''component "{pet_name}" {{
  source = "./pet"

  inputs = {{
    prefix = var.prefix
  }}

  providers = {{
    random = provider.random.this
  }}
}}
'''
        nulls_block = f'''component "{nulls_name}" {{
  source = "./nulls"

  inputs = {{
    pet       = component.{pet_name}.name
    instances = {instances}
  }}

  providers = {{
    null = provider.null.this
  }}
}}
'''
        blocks.append(pet_block)
        blocks.append(nulls_block)

    with open("components.tfstack.hcl", "w") as f:
        f.write("\n".join(blocks))
    print(f"Generated {num_pairs} pet/nulls component pairs in components.tfstack.hcl.")

if __name__ == "__main__":
    main() 